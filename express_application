Application [Express 应用]
参考：http://www.nodeclass.com/api/express4.html#app.use
      http://www.expressjs.com.cn/4x/api.html#app.use
express()  ------创建express应用
var express=require(“express”);
var app=express();
app.get(‘/’,function(res,req){
res.send(“hello,world”);
});
app.listen(3000);

application设置
使用app.set()来设置Express应用，可以用app.get()取回设置值。比如：
app.set(‘name’,’my_title’);
app.get(‘name’);   //打印my_title

app.set(name,value);
为name设置值。

app.get(name,value);
在set()设置完成后，取回name的值。

app.enabled(name)
检查name是否开启。比如这里的name为trust proxy[反向代理服务器设置]
app.enabled(‘trust proxy’);
//=>false          //第一次检查发现未开启
app.enable(‘trust proxy’);  //利用enable()打开
app.enabled(‘’trust proxy);
//=>true           //第二次检查已经打开

app.disabled(name)
检查name设置是否关闭，与enabled()的输出相反;
同样利用enable()函数来控制开关

app.use([path],[function...],function)
1.将中间件函数function(s)的执行挂载到路径上。如果路径没有特殊设置，默认为’/’。
2.挂载中间件到路径上意味着只要只要被请求的基路径与path匹配就要执行中间件函数。
例如：app.use(‘/apple’,function()),那么请求的路径不管是’/apple’,’/apple/images’还是’/apple/images/news’都将匹配path(‘/apple’)，与就是说都会执行function(s)。
3.由于在没有设置路径的情况下，path默认为’/’。这种情况下无论被请求的路径是什么，都会执行挂载的中间件函数function(s)。
app.use(function(req,res,next){
console.log(‘Time:%d’,Date.now());
next();
})
4.中间件函数按顺序被执行，所以中间件函数的参数顺序很重要。
 app.use(function(req,res,next){
  res.send(“hello,word”);    //先执行中间件函数接收请求，再根据request执行res.send()
})
app.get(‘/’,function(req,res){
res.send(‘Welcome’);       //请求不会到达这个路由[这一句没理解]
})
5.path的设置可以是路径,path pattern或者用来匹配路径的正则表达式，或者数组参数。
 
类型	例子
path	app.use(‘/apples’,function(req,res,next){
next();})
path pattern	app.use(‘/abc?d’,function(req,res,next){
next();})
app.use(‘ab+cd’,function(req,res,next){
next();})
正则	qpp.use(/\/bac|\/xyz/,function(req,res,next(){
next();}))
数组	app.uese([‘/abcd’,’/xyza’,/\lmn|\/pqr/],function(req,res,next){
next();})

 function可以是中间件函数，一系列中间件函数，中间件函数数组或者它们的组合。
类型	例子
单个中间件	app.use(function(req,res,next){next();})//本地挂载
var router=express.Router();
router.get(‘/’,function(req,res,next){next();})
app.use(router);   //路由为中间件
var subApp=express();
subApp.get(‘/’,function(req,res,next){next();})
app.use(subApp);
一组中间件	var r1=express();
r1.get(‘/’,function(req,res,next){next()};)
var r2=express();
r2.get(‘/’,function(req,res,next){next();})
app.use(r1,r2);  //我觉得应该是异步执行
数组	var r1=express();
r1.get(‘/’,function(req,res,next){next()};)
var r2=express();
r2.get(‘/’,function(req,res,next){next();})
app.use(‘/’,[r1,r2]); 
下边的事一些使用静态中间件的例子，通过express.static来调用。
app.use(express.static(__dirname+’public’));

app.engine(ext,callback)
将给定的模板引擎配置到ext上。
默认情况下，Express用require()来载入需要扩展的模块。举例来说，如果你想渲染’foo.jade’文件，Express将要自发的执行以下命令：
app.engine(‘jade’,require(‘jade’).__express);
上述将’jade’模块用来配置’jade’类型的文件，但是不能配置模板以外的文件，比如如果想用EJS模板来配置html文件，需要用到:
app.engine(‘html’,require(‘ejs’),renderFile);

app.on(“mount”,callback(parent))
mount事件是Express的一个子应用，被挂载在一个父应用上。父应用通过回调函数被调用。
var admin=express();
admin.on(‘mount’,function(parent){
console.log(“Admin Mounted”);
console.log(parent);   //指向父应用
})
admin.get(‘/’,function(req,res){
res.send(“Admin Homepage”);
});
app.use(‘/admin’,admin);

app.listen()
绑定监听端口。这个方法和http.Server#listen()方法一样
var express=require(‘express’);
var app=express();
app.listen(3000);

app.render(view,[options],callback)
用callback函数的响应来渲染view。这是res.render在应用形式上的变式。但是它们的功能一致。
app.render(‘email’,function(err,html){
});
app.render(‘email’,{name:’Tobi’},function(err,html){
});

app.route(path)
返回单个路由的样例，被用来处理具有选择性中间件的HTTP请求。使用app.route()方法可以避免路由重名。
var app=express();
app.route(‘/events’).all(function(req,res,next){
}).get(function(req,res,next){res.json();}).post(function(req,res,next){})

app.all(path,[callback...],callback)
这个方法类似于app.VERB(),但是它能够匹配所有的HTTP请求方式（也就是HTTPGET\HTTPPSOT\HTTPPUT\HTTPDELETE）。
与app.use()的方法类似，但是可以进行完整匹配，而app.use()只进行前缀匹配。
app.use(‘/a’,function(req,res,next){console.log(‘app.use’);next()})
如果访问’/a’则use(),all()都会调用；如果访问’/a’只有use()被调用。
