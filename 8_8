2.sort_wit.js
/***
 * 数据库实现排序====>最近操作的纪录往前排
 * 最多一次select * from table limit(5)
 * 方案一：动态修改索引===>每次操作完索引设置为最先，其余的依次往后排
 *         每次读取数据库前五个
 * 方案二：每次select或者其他动作之后，将此纪录 重新更新近数据库，倒序读取后五个，，，其他的依次减1（因为数据表是队列，正序+产生id重复）
 * 方案三：修改数据库方案，增加优先级列，每次访问一个纪录，此纪录的优先级自动减到1，其余纪录依次的这一项依次+1，最后按照优先级order by prior 12345
 * */

/***
 * 显示五条，如果不够五条，先计算有多少条，再操作
 * 数据库形态：
 * create table `table_wit`(id int(4) not null primary key auto_increment,
 * name varchar(20) not null,
 * mail varchar(20) not null,
 * prior int(4) null
 * );
 * update table_wit set prior=0;
 * */
var express=require("express");
var mysql=require("mysql");
var M=function(){
    /****
     * 添加数据库
     * */
    this.add=function($name,$mail){
        return new Promise(function(resolve,reject){
            var connection=mysql.createConnection({
                host:"localhost",
                user:"root",
                password:"witlinux",
                database:"witwit",
                port:3306,
            });
            connection.connect();
            $sql="insert into `table_wit` values(null,"+'"'+$name+'"'+',"'+$mail+'"'+",null);";
            connection.query($sql,function(err,res){
                if(err){
                    console.log(err)
                }else {
                 //   console.log($sql);
                    resolve(res);
                 //   console.log(res['insertId']);

                }
            })
            //console.log($sql);
        })
    }

    /***
     * 查询，显示五个
     * 1.判断，如果个数少于等于5个，直接按倒序显示
     * 2.如果个数大于五个，按倒序，显示后五个
     * */
    this.find_M_One=function(){
        return new Promise(function(resolve,reject){
            /***
             * 统计个数
             * */
            var connection=mysql.createConnection({
                host:"localhost",
                user:"root",
                password:"witlinux",
                database:"witwit",
                port:3306,
            });
            connection.connect();
            $sqlc="select count(*) from `table_wit`";
            connection.query($sqlc,function(err,res){
               // console.log(res[0]['count(*)']);
                $count=res[0]['count(*)'];
                if($count<=5){
                    $sqls='select * from `table_wit` order by id desc';
                    connection.query($sqls,function(err,res){
                        resolve(res);
                    })
                }else{
                    $sqls='select * from `table_wit` order by id desc limit 0,5';
                    connection.query($sqls,function(err,res){
                      //  resolve(res);
                        console.log(res);
                        resolve(res);
                    })
                }
            })
        })
    }

    /***
     * 查询方法二，根据prior的大小来查询前五个，相等判断
     * 如果不足五个，则直接排序
     * */
    this.find_M_Two=function(){
        return new Promise(function(resolve,reject){
            /***
             * 统计个数
             * */
            var connection=mysql.createConnection({
                host:"localhost",
                user:"root",
                password:"witlinux",
                database:"witwit",
                port:3306,
            });
            connection.connect();
            //$sqlu="update `table_wit` set prior=0";
            //connection.query($sqlu,function(err,res){});
            $sqlc="select count(*) from `table_wit`";
            connection.query($sqlc,function(err,res){
                // console.log(res[0]['count(*)']);
                $count=res[0]['count(*)'];
                if($count<=5){
                    $sqls='select * from `table_wit` order by prior asc';
                    connection.query($sqls,function(err,res){
                        resolve(res);
                    })
                }else{
                    $sqls='select * from `table_wit` order by prior asc limit 0,5';
                    connection.query($sqls,function(err,res){
                        //  resolve(res);
                        console.log(res);
                        resolve(res);
                    })
                }
            })
        })
    }

    /****
     * 查看某条专栏
     * */
    this.findOne=function($name){
        return new Promise(function(resolve,reject){
            var connection=mysql.createConnection({
                host:"localhost",
                user:"root",
                password:"witlinux",
                database:"witwit",
                port:3306,
            });
            connection.connect();
            $sqlf="select * from `table_wit` where name="+'"'+$name+'"';
            //console.log($sqlf);
            connection.query($sqlf,function(err,res){
             //   console.log(res[0]);
                resolve(res[0]['id']);
            })
        })
    }

    /***
     * 删除
     * */
    this.DeleteOne=function($name){
        return new Promise(function(resolve,reject){
            var connection=mysql.createConnection({
                host:"localhost",
                user:"root",
                password:"witlinux",
                database:"witwit",
                port:3306,
            });
            connection.connect();
            $sqlf="delete from `table_wit` where name="+'"'+$name+'"';
           // console.log($sqlf);
            connection.query($sqlf,function(err,res){
                console.log(res);
                resolve(res);
            })
        })
    }

    /***
     * 统计个数
     * */
}

//M();
//getCount();
module.exports=M;


//问题1.M().thismethod()????
//在Promise中用return传递为啥传不过来

get5Models.js
var express=require('express');
var mysql=require('mysql');
var M=require("./sort_wit.js");

var Mss=function(){
    this.Q=function(){
        return new Promise((resolve,reject)=>{
            var connection=mysql.createConnection({
                host:"localhost",
                user:"root",
                password:"witlinux",
                database:"witwit",
                port:3306,
            });
            connection.connect();
            $count=7;
            M();
            findOne("wit4").then(info=>{
                $sqlss="update `table_wit` set id="+($count+1)+" where id="+info;
                connection.query($sqlss,function(err,res){
                    if(err){
                        reject(err);
                    }else{
                        $sqlsss="update `table_wit` set id=id-1";
                        connection.query($sqlsss,function(err,res){
                            find_M_One();
                        })
                    }
                })
            })
        })
    }
}

module.exports=Mss;
Mss();
Q();


产生的问题：
1.Promise.then方法
  （1）是作为对象的方法，为何不能用方法的方式调用
  （2）reject的传值
  （3）resolve传Promise对象的情况
  （4）为何第二次还要声明var connection=createConnection({})，不是在M中已经调用了吗
  （5）promise是为了解决什么问题而生的

2.nodejs中的return===>先测试return方法
  （1）return和resolve的区别
  （2）本地写return函数的调用情况
  （3）异地得到return的返回值
  （4）Promise中的return如何返回和接收返回值。







产生的问题：
1.Promise.then方法
  （1）是作为对象的方法，为何不能用方法的方式调用

  （2）reject的传值       [解决]
  （3）resolve传Promise对象的情况    [解决]

  （4）为何第二次还要声明var connection=createConnection({})，不是在M中已经调用了吗

  （5）promise是为了解决什么问题而生的
       把嵌套变为链式调用，原来是异步的，谁先计算完成先返回谁，现在变为顺序执行。

2.nodejs中的return===>先测试return方法
  （1）return和resolve的区别       [完成]
  （2）本地写return函数的调用情况  [完成]
  （3）异地得到return的返回值       
  （4）Promise中的return如何返回和接收返回值。 [完成]
===============================================================
1.Promise用return会有何效果，如果只是传值，return何resolve是不是一样的


S1：
var p=new Promise((resolve,reject)=>{
    $m=5;
    resolve($m);
}).then(re=>{
    console.log(re);
    return(re);
}).then(info=>{
    console.log(info);
})
p;                        //在第一个函数中，只能用resolve，不能用return，因为return传不到下边的then方法中来

E2：
var p=new Promise((resolve,reject)=>{
    $m=5;
    resolve($m);
}).then(re=>{
    console.log(re);
    resolve(re);     //error:resolve未定义，因为then后的Promise对象已经不是之前的Promise对象，then的函数体部分可以引入一个Promise对象
}).then(info=>{      //但不能直接resolve
    console.log(info);
})
p;


S1：异地调用return
return_test.js
var M=require("./te.js");
$sada=M(6);
console.log($sada);

te.js
var p=function($m){
    return ($m);
}
module.exports=p;

----=---=---=---=---=---
